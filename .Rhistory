shiny::runApp()
runApp()
library(DT)
library(tidyverse)
library(readxl)
library(gridExtra)
library(ggpubr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(DT)
<<<<<<< HEAD
library(tidyverse)
library(readxl)
library(gridExtra)
library(ggpubr)
=======
library(dplyr)
>>>>>>> e68881dbbbcb6e17b487bf7e514fe6efb220d2c1
ui <- fluidPage(
titlePanel("Credit Scoring Prediction"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose Excel File",
multiple = FALSE,
accept = "xlsx"),
selectInput("response", "Response Variable:",
choices = c("Financial Rating", "Qualitative Rating"),
selected = "Financial Rating"),
checkboxGroupInput("covariate", "Choose Covariates:",
c("Qualitative rating about transparency",
"Qualitative rating about shareholder's contribution",
"Favourable economic market",
"Sector will increase?",
"Management Quality",
"Hold by a bigger firm",
"CEO Involved",
"Help from the group on legal",
"Assets",
"Liability",
"Turnover",
"EBITDA",
"Debt on equity",
"Gross Operating Surplus Global Costs",
"Gross Operating Surplus Turnover 100"),
textOutput("number")
),
#Run Button
actionButton("runbutton","Run!")
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Data",DT::dataTableOutput("tbl")),
tabPanel("Graphs", plotOutput("pairplot")),
tabPanel("Model")
)
)
)
)
server <- function(input, output, session) {
data <- reactive({
file1 <- input$file1
if (is.null(file1)) {
return()
}
data <- read_excel(file1$datapath)
data
})
observe({
updateSelectInput(
session,
"response",
choices = names(data()[-1])
)
})
observe({
updateCheckboxGroupInput(
session,
"covariate",
choices = names(data()[-1])
)
})
# observe button 1 press.
observe({
input$runbutton
if(input$response == "Financial Rating"){
current_model <- readRDS("models/ind_gam.RData")
}
if(input$response == "Qualitative Rating"){
current_model <- readRDS("models/quali.RData")
}
###DEBUG MODAL:
showModal(modalDialog(
title = " debug: different model loaded",
length(current_model)
))
})
output$tbl <- DT::renderDataTable({
DT::datatable(data())
})
output$pairplot <- renderPlot({
nplot<-length(input$covariate)
covar <- input$covariate
myplots <- list()
for ( i in 1:nplot) {
p1<-  ggplot(data(), aes_string(y = input$response, x = covar[i])) +
geom_point()
myplots[[i]] <- (p1)
}
grid.arrange(grobs=myplots, ncol=3)
})
}
runApp()
runApp()
